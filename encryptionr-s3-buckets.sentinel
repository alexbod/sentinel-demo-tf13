import "strings"
import "tfplan"
import "types"

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {
  resources = find_raw_resources_from_plan(type)
  resource_map = {}
  for resources as address, r {
    current_resource = null
    if "applied" in r {
      current_resource = r.applied
    } else if "diff" in r {
      current_resource = r.diff
    }
    resource_map[address] = current_resource
  }
  return resource_map
}

find_raw_resources_from_plan = func(type) {
  resources = {}
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {
        # Skip resources that are being destroyed
        # to avoid unnecessary policy violations.
        # Used to be: if length(r.diff) == 0
        if r.destroy and not r.requires_new {
          continue
        }

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        resources[address] = r
      }
    }
  }

  return resources
}



f = func() {
	resource_instances = find_resources_from_plan("aws_s3_bucket")
	for resource_instances as _, r {
		if ((length(r.server_side_encryption_configuration) else 0) == 0 or r.server_side_encryption_configuration[0].rule[0].apply_server_side_encryption_by_default[0] not contains "sse_algorithm") {
			return false
		}
	}
	return true
}

main = rule {
	f()
}
